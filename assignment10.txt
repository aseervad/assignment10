assignment10
├── backend/
     ├── requirements.txt
     ├── app.py
     ├── config.py
     ├── models.py
     ├── test_crud.py
     └── routes/
	  ├── __init__.py
	  └── test_routes.py
├── ielts-speaking-test/
     ├── public/
	  ├── logo.png
	  └── edubot-logo.png
     ├── node_modules/
     ├── src/
	  ├── components/
		  ├── auth/
		       ├── Login.js
		       ├── Register.js
		  ├── layout/
		       ├── Navbar.js
		  ├── pages/
		       ├── Home.js
		  ├── tests/
		       ├── ListeningTests.js
		       ├── SpeakingTests.js
	  	  ├── AdminDashboard.tsx
	  	  ├── Dashboard.tsx
	  	  ├── Footer.tsx
	  	  ├── Header.tsx
	  	  ├── Home.tsx
	  	  ├── Login.tsx
	  	  ├── PrivateRoute.tsx
	  	  ├── QuestionCard.tsx
	  	  ├── TestStartButton.tsx
	  	  ├── TestTakerDashboard.tsx
          ├── App.tsx
          ├── App.js
          ├── main.tsx
     ├── index.html
     ├── tsconfig.json
     ├── package.json

Frontend Codes (or) ielts-speaking-test
---------------------------------------
// src/App.js:

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';

// Import components
import Navbar from './components/layout/Navbar';
import Home from './components/pages/Home';
import Register from './components/auth/Register';
import Login from './components/auth/Login';
import SpeakingTests from './components/tests/SpeakingTests';
import ListeningTests from './components/tests/ListeningTests';

function App() {
  return (
    <Router>
      <div className="App">
        <Navbar />
        <div className="container mt-4">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/register" element={<Register />} />
            <Route path="/login" element={<Login />} />
            <Route path="/speaking-tests" element={<SpeakingTests />} />
            <Route path="/listening-tests" element={<ListeningTests />} />
          </Routes>
        </div>
      </div>
    </Router>
  );
}

export default App;
---------------
// src/App.tsx:

import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Header from './components/Header';
import Footer from './components/Footer';
import Home from './components/Home';
import Login from './components/Login';
import AdminDashboard from './components/AdminDashboard';
import TestTakerDashboard from './components/TestTakerDashboard';
import PrivateRoute from './components/PrivateRoute';

const App: React.FC = () => {
  // In a real app, this would come from your authentication system
  const isAuthenticated = localStorage.getItem('isAuthenticated') === 'true';
  
  return (
    <BrowserRouter>
      <div style={{
        fontFamily: 'Arial, sans-serif',
        margin: 0,
        padding: 0,
        minHeight: '100vh',
        display: 'flex',
        flexDirection: 'column'
      }}>
        <Header />
        <div style={{ flex: 1 }}>
          <Routes>
            {/* Public Routes */}
            <Route path="/" element={<Home />} />
            <Route path="/login" element={<Login />} />
            
            {/* Protected Routes */}
            <Route element={<PrivateRoute isAuthenticated={isAuthenticated} />}>
              <Route path="/admin-dashboard" element={<AdminDashboard />} />
              <Route path="/test-taker-dashboard" element={<TestTakerDashboard />} />
            </Route>
          </Routes>
        </div>
        <Footer />
      </div>
    </BrowserRouter>
  );
};

export default App;
---------------
// src/main.tsx:

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
---------------
// src/components/AdminDashboard.tsx:

// src/components/AdminDashboard.tsx
import React from 'react';
import { Link } from 'react-router-dom';

const AdminDashboard: React.FC = () => {
  return (
    <div style={{ padding: '2rem' }}>
      <h1>Admin Dashboard</h1>
      <p>Welcome to the admin dashboard. This is a protected route.</p>
      <div style={{ marginTop: '2rem' }}>
        <h2>Admin Controls</h2>
        <ul>
          <li>Manage test questions</li>
          <li>View test taker results</li>
          <li>Configure test settings</li>
        </ul>
      </div>
      <div style={{ marginTop: '2rem' }}>
        <Link 
          to="/" 
          style={{
            color: '#2563eb',
            marginRight: '1rem'
          }}
        >
          Back to Home
        </Link>
        <button 
          onClick={() => {
            localStorage.removeItem('isAuthenticated');
            window.location.reload();
          }}
          style={{
            background: '#ef4444',
            color: 'white',
            padding: '0.5rem 1rem',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer'
          }}
        >
          Logout
        </button>
      </div>
    </div>
  );
};

export default AdminDashboard;
---------------
// src/components/Dashboard.tsx:

import React from 'react';
import TestStartButton from './TestStartButton';

const Dashboard: React.FC = () => {
  return (
    <main style={{
      flex: 1,
      padding: '2rem',
      textAlign: 'center'
    }}>
      <h2>Welcome to the Dashboard!</h2>
      <p>Select a test to begin your practice session.</p>
      <div style={{ marginTop: '20px' }}>
        <TestStartButton />
      </div>
    </main>
  );
};

export default Dashboard;
---------------
// src/components/Footer.tsx:

import React from 'react';

const Footer: React.FC = () => {
  return (
    <footer style={{
      background: '#1e293b',
      color: 'white',
      textAlign: 'center',
      padding: '1rem',
      marginTop: 'auto'
    }}>
      <p>© 2024 IELTS Speaking Test Platform</p>
      <p>Contact: support@ielts.com</p>
    </footer>
  );
};

export default Footer;
---------------
// src/components/Header.tsx:

// src/components/Header.tsx
import React from 'react';
import { Link } from 'react-router-dom';

const Header: React.FC = () => {
  const isAuthenticated = localStorage.getItem('isAuthenticated') === 'true';
  
  return (
    <header style={{
      background: '#2563eb',
      color: 'white',
      padding: '1rem',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center'
    }}>
      <div>
        <h1 style={{ margin: 0 }}>IELTS Speaking Test Platform</h1>
      </div>
      <nav>
        <Link to="/" style={{ color: 'white', marginRight: '1rem', textDecoration: 'none' }}>
          Home
        </Link>
        {isAuthenticated ? (
          <Link to="/test-taker-dashboard" style={{ color: 'white', textDecoration: 'none' }}>
            Dashboard
          </Link>
        ) : (
          <Link to="/login" style={{ color: 'white', textDecoration: 'none' }}>
            Login
          </Link>
        )}
      </nav>
    </header>
  );
};

export default Header;
---------------
// src/components/Home.tsx:

// src/components/Home.tsx
import React from 'react';
import { Link } from 'react-router-dom';

const Home: React.FC = () => {
  return (
    <div style={{ textAlign: 'center', padding: '2rem' }}>
      <h1>Welcome to IELTS Speaking Test Platform</h1>
      <p>Practice your English speaking skills and prepare for your IELTS exam.</p>
      <div style={{ marginTop: '2rem' }}>
        <Link 
          to="/login" 
          style={{
            background: '#2563eb',
            color: 'white',
            padding: '0.5rem 1rem',
            borderRadius: '4px',
            textDecoration: 'none',
            marginRight: '1rem'
          }}
        >
          Login
        </Link>
        <Link 
          to="/test-taker-dashboard" 
          style={{
            background: '#10b981',
            color: 'white',
            padding: '0.5rem 1rem',
            borderRadius: '4px',
            textDecoration: 'none'
          }}
        >
          Go to Dashboard (Protected)
        </Link>
      </div>
    </div>
  );
};

export default Home;
---------------
// src/components/Login.tsx:

// src/components/Login.tsx
import React, { useState } from 'react';

const Login: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // In a real app, you would validate and authenticate here
    localStorage.setItem('isAuthenticated', 'true');
    window.location.reload(); // Simple way to refresh and apply authentication
  };
  
  return (
    <div style={{
      maxWidth: '400px',
      margin: '2rem auto',
      padding: '2rem',
      boxShadow: '0 0 10px rgba(0,0,0,0.1)',
      borderRadius: '8px'
    }}>
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <div style={{ marginBottom: '1rem' }}>
          <label htmlFor="username" style={{ display: 'block', marginBottom: '0.5rem' }}>Username:</label>
          <input 
            type="text" 
            id="username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            style={{ width: '100%', padding: '0.5rem' }}
            required
          />
        </div>
        <div style={{ marginBottom: '1rem' }}>
          <label htmlFor="password" style={{ display: 'block', marginBottom: '0.5rem' }}>Password:</label>
          <input 
            type="password" 
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            style={{ width: '100%', padding: '0.5rem' }}
            required
          />
        </div>
        <button 
          type="submit" 
          style={{
            background: '#2563eb',
            color: 'white',
            padding: '0.5rem 1rem',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer'
          }}
        >
          Login
        </button>
      </form>
    </div>
  );
};

export default Login;
---------------
// src/components/PrivateRoute.tsx:

// src/components/PrivateRoute.tsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';

interface PrivateRouteProps {
  isAuthenticated: boolean;
}

const PrivateRoute: React.FC<PrivateRouteProps> = ({ isAuthenticated }) => {
  return isAuthenticated ? <Outlet /> : <Navigate to="/login" />;
};

export default PrivateRoute;
---------------
// src/components/QuestionCard.tsx:

import React, { useState, useEffect } from 'react';

// Define the Question interface
interface Question {
  id: number;
  text: string;
  category: string;
  difficulty: string;
}

// Define the props for the QuestionCard component
interface QuestionCardProps {
  questionId?: number; // Optional ID to fetch a specific question
  onAnswered?: (questionId: number) => void; // Optional callback when question is answered
}

const QuestionCard: React.FC<QuestionCardProps> = ({ questionId, onAnswered }) => {
  const [question, setQuestion] = useState<Question | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  
  // Mock API call function to fetch a question
  const fetchQuestion = async (id?: number) => {
    try {
      setLoading(true);
      
      // In a real app, this would be a fetch call to your backend API
      // For demonstration, we'll simulate an API call with a timeout
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Mock data - in a real app, this would come from your API
      const mockQuestions: Question[] = [
        { id: 1, text: "Tell me about your hometown.", category: "Personal", difficulty: "Easy" },
        { id: 2, text: "Do you prefer living in a house or an apartment? Why?", category: "Living Situation", difficulty: "Medium" },
        { id: 3, text: "Describe a book that made an impression on you.", category: "Literary", difficulty: "Hard" },
        { id: 4, text: "How often do you use public transportation?", category: "Transportation", difficulty: "Easy" },
      ];
      
      if (id) {
        const foundQuestion = mockQuestions.find(q => q.id === id);
        if (foundQuestion) {
          setQuestion(foundQuestion);
        } else {
          setError("Question not found");
        }
      } else {
        // Get a random question if no ID provided
        const randomIndex = Math.floor(Math.random() * mockQuestions.length);
        setQuestion(mockQuestions[randomIndex]);
      }
      
      setLoading(false);
    } catch (err) {
        console.error("Error fetching question:", err); // Use the err variable by logging it
        setError("Failed to fetch question");
        setLoading(false);
      }
  };
  
  useEffect(() => {
    fetchQuestion(questionId);
  }, [questionId]);
  
  // Handle user answering the question
  const handleAnswered = () => {
    if (question && onAnswered) {
      onAnswered(question.id);
    }
  };
  
  // Show loading state
  if (loading) {
    return (
      <div style={{
        border: '1px solid #e2e8f0',
        borderRadius: '8px',
        padding: '2rem',
        margin: '1rem 0',
        textAlign: 'center',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <p>Loading question...</p>
      </div>
    );
  }
  
  // Show error state
  if (error) {
    return (
      <div style={{
        border: '1px solid #feb2b2',
        borderRadius: '8px',
        padding: '2rem',
        margin: '1rem 0',
        backgroundColor: '#fff5f5',
        color: '#e53e3e',
        textAlign: 'center',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <p>Error: {error}</p>
        <button 
          onClick={() => fetchQuestion(questionId)} 
          style={{
            background: '#e53e3e',
            color: 'white',
            padding: '0.5rem 1rem',
            borderRadius: '4px',
            border: 'none',
            marginTop: '1rem',
            cursor: 'pointer'
          }}
        >
          Try Again
        </button>
      </div>
    );
  }
  
  // Show question
  return (
    <div style={{
      border: '1px solid #e2e8f0',
      borderRadius: '8px',
      padding: '2rem',
      margin: '1rem 0',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
    }}>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        marginBottom: '1rem'
      }}>
        <span style={{
          backgroundColor: '#e2e8f0',
          padding: '0.25rem 0.5rem',
          borderRadius: '4px',
          fontSize: '0.875rem'
        }}>
          Question #{question?.id}
        </span>
        <span style={{
          backgroundColor: question?.difficulty === 'Easy' ? '#c6f6d5' : 
                          question?.difficulty === 'Medium' ? '#fefcbf' : '#fed7d7',
          padding: '0.25rem 0.5rem',
          borderRadius: '4px',
          fontSize: '0.875rem'
        }}>
          {question?.difficulty}
        </span>
      </div>
      
      <h3 style={{ fontSize: '1.25rem', marginBottom: '1rem' }}>
        {question?.text}
      </h3>
      
      <div style={{ 
        backgroundColor: '#f7fafc',
        padding: '1rem',
        borderRadius: '4px',
        marginBottom: '1rem'
      }}>
        <p style={{ fontStyle: 'italic' }}>
          Category: {question?.category}
        </p>
      </div>
      
      <div style={{ display: 'flex', justifyContent: 'space-between' }}>
        <button 
          onClick={() => fetchQuestion()}
          style={{
            background: '#3182ce',
            color: 'white',
            padding: '0.5rem 1rem',
            borderRadius: '4px',
            border: 'none',
            cursor: 'pointer'
          }}
        >
          Next Question
        </button>
        
        <button 
          onClick={handleAnswered}
          style={{
            background: '#48bb78',
            color: 'white',
            padding: '0.5rem 1rem',
            borderRadius: '4px',
            border: 'none',
            cursor: 'pointer'
          }}
        >
          Mark as Answered
        </button>
      </div>
    </div>
  );
};

export default QuestionCard;
---------------
// src/components/TestStartButton.tsx:

import React, { useState } from 'react';

const TestStartButton: React.FC = () => {
  // State to track if test has started
  const [isStarted, setIsStarted] = useState<boolean>(false);
  
  // Function to handle button click
  const handleStartTest = () => {
    setIsStarted(true);
  };
  
  return (
    <button 
      onClick={handleStartTest}
      disabled={isStarted}
      style={{
        backgroundColor: isStarted ? '#9ca3af' : '#2563eb',
        color: 'white',
        padding: '10px 20px',
        border: 'none',
        borderRadius: '4px',
        fontSize: '16px',
        cursor: isStarted ? 'not-allowed' : 'pointer',
        transition: 'background-color 0.3s ease'
      }}
    >
      {isStarted ? 'Test Started' : 'Start Test'}
    </button>
  );
};

export default TestStartButton;
---------------
// src/components/TestTakerDashboard.tsx:

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import QuestionCard from './QuestionCard';

const TestTakerDashboard: React.FC = () => {
  const [selectedQuestionId, setSelectedQuestionId] = useState<number | undefined>(undefined);
  const [answeredQuestions, setAnsweredQuestions] = useState<number[]>([]);
  const [showQuestion, setShowQuestion] = useState<boolean>(false);
  
  // Handle starting a specific test
  const handleStartTest = (questionId?: number) => {
    setSelectedQuestionId(questionId);
    setShowQuestion(true);
  };
  
  // Handle when a question is answered
  const handleQuestionAnswered = (questionId: number) => {
    if (!answeredQuestions.includes(questionId)) {
      setAnsweredQuestions([...answeredQuestions, questionId]);
    }
    
    // You could implement some logic here to show the next question
    // For simplicity, we'll just mark it as answered
  };
  
  return (
    <div style={{ padding: '2rem' }}>
      <h1>Test Taker Dashboard</h1>
      <p>Welcome to your personal IELTS Speaking Test dashboard.</p>
      
      {!showQuestion ? (
        <div style={{ marginTop: '2rem' }}>
          <h2>Available Tests</h2>
          <div style={{ 
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',
            gap: '1rem',
            marginTop: '1rem'
          }}>
            <div style={{
              border: '1px solid #e2e8f0',
              borderRadius: '8px',
              padding: '1.5rem',
              boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
            }}>
              <h3>IELTS Speaking Part 1: Introduction</h3>
              <p>Practice answering common introduction questions.</p>
              <button 
                onClick={() => handleStartTest(1)}
                style={{
                  background: '#2563eb',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  borderRadius: '4px',
                  border: 'none',
                  marginTop: '1rem',
                  cursor: 'pointer'
                }}
              >
                Start Test
              </button>
            </div>
            
            <div style={{
              border: '1px solid #e2e8f0',
              borderRadius: '8px',
              padding: '1.5rem',
              boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
            }}>
              <h3>IELTS Speaking Part 2: Long-turn speaking</h3>
              <p>Practice speaking on a given topic for 2 minutes.</p>
              <button 
                onClick={() => handleStartTest(2)}
                style={{
                  background: '#2563eb',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  borderRadius: '4px',
                  border: 'none',
                  marginTop: '1rem',
                  cursor: 'pointer'
                }}
              >
                Start Test
              </button>
            </div>
            
            <div style={{
              border: '1px solid #e2e8f0',
              borderRadius: '8px',
              padding: '1.5rem',
              boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
            }}>
              <h3>IELTS Speaking Part 3: Discussion</h3>
              <p>Practice answering in-depth questions on various topics.</p>
              <button 
                onClick={() => handleStartTest(3)}
                style={{
                  background: '#2563eb',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  borderRadius: '4px',
                  border: 'none',
                  marginTop: '1rem',
                  cursor: 'pointer'
                }}
              >
                Start Test
              </button>
            </div>
            
            <div style={{
              border: '1px solid #e2e8f0',
              borderRadius: '8px',
              padding: '1.5rem',
              boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
            }}>
              <h3>Random Practice Questions</h3>
              <p>Practice with randomly selected questions from all parts.</p>
              <button 
                onClick={() => handleStartTest()}
                style={{
                  background: '#2563eb',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  borderRadius: '4px',
                  border: 'none',
                  marginTop: '1rem',
                  cursor: 'pointer'
                }}
              >
                Start Test
              </button>
            </div>
          </div>
        </div>
      ) : (
        <div style={{ marginTop: '2rem' }}>
          <button 
            onClick={() => setShowQuestion(false)}
            style={{
              background: '#4b5563',
              color: 'white',
              padding: '0.5rem 1rem',
              borderRadius: '4px',
              border: 'none',
              marginBottom: '1rem',
              cursor: 'pointer'
            }}
          >
            Back to Tests
          </button>
          
          <QuestionCard 
            questionId={selectedQuestionId}
            onAnswered={handleQuestionAnswered}
          />
          
          {answeredQuestions.length > 0 && (
            <div style={{ marginTop: '2rem' }}>
              <h3>Progress</h3>
              <p>You have answered {answeredQuestions.length} question(s) in this session.</p>
            </div>
          )}
        </div>
      )}
      
      <div style={{ marginTop: '2rem' }}>
        <Link 
          to="/" 
          style={{
            color: '#2563eb',
            marginRight: '1rem'
          }}
        >
          Back to Home
        </Link>
        <button 
          onClick={() => {
            localStorage.removeItem('isAuthenticated');
            window.location.reload();
          }}
          style={{
            background: '#ef4444',
            color: 'white',
            padding: '0.5rem 1rem',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer'
          }}
        >
          Logout
        </button>
      </div>
    </div>
  );
};

export default TestTakerDashboard;
---------------
// src/components/layout/Navbar.js:

import React from 'react';
import { Link } from 'react-router-dom';

const Navbar = () => {
  return (
    <nav className="navbar navbar-expand-lg navbar-dark bg-primary">
      <div className="container">
        <Link className="navbar-brand" to="/">IELTS Practice</Link>
        <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav">
          <span className="navbar-toggler-icon"></span>
        </button>
        <div className="collapse navbar-collapse" id="navbarNav">
          <ul className="navbar-nav ms-auto">
            <li className="nav-item">
              <Link className="nav-link" to="/">Home</Link>
            </li>
            <li className="nav-item">
              <Link className="nav-link" to="/speaking-tests">Speaking Tests</Link>
            </li>
            <li className="nav-item">
              <Link className="nav-link" to="/listening-tests">Listening Tests</Link>
            </li>
            <li className="nav-item">
              <Link className="nav-link" to="/register">Register</Link>
            </li>
            <li className="nav-item">
              <Link className="nav-link" to="/login">Login</Link>
            </li>
          </ul>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
--------------
// src/components/pages/Home.js:

import React from 'react';
import { Link } from 'react-router-dom';

const Home = () => {
  return (
    <div className="jumbotron">
      <h1 className="display-4">Welcome to IELTS Practice</h1>
      <p className="lead">Practice your English language skills and prepare for your IELTS test</p>
      <hr className="my-4" />
      <p>Choose a test type to begin practicing:</p>
      <div className="d-flex">
        <Link to="/speaking-tests" className="btn btn-primary btn-lg me-2">Speaking Tests</Link>
        <Link to="/listening-tests" className="btn btn-success btn-lg">Listening Tests</Link>
      </div>
    </div>
  );
};

export default Home;
------------
// src/components/auth/Register.js:

import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const Register = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    password2: ''
  });
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const { name, email, password, password2 } = formData;

  const onChange = e => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const onSubmit = async e => {
    e.preventDefault();
    
    if (password !== password2) {
      setError('Passwords do not match');
      return;
    }
    
    try {
      const res = await axios.post('http://localhost:5000/api/users', {
        name,
        email,
        password
      });
      
      console.log('Registration successful:', res.data);
      navigate('/login');
    } catch (err) {
      setError(err.response?.data?.message || 'Registration failed');
      console.error('Registration error:', err.response?.data);
    }
  };

  return (
    <div className="card">
      <div className="card-body">
        <h2 className="card-title text-center mb-4">Register</h2>
        {error && <div className="alert alert-danger">{error}</div>}
        <form onSubmit={onSubmit}>
          <div className="mb-3">
            <label htmlFor="name" className="form-label">Name</label>
            <input
              type="text"
              className="form-control"
              id="name"
              name="name"
              value={name}
              onChange={onChange}
              required
            />
          </div>
          <div className="mb-3">
            <label htmlFor="email" className="form-label">Email</label>
            <input
              type="email"
              className="form-control"
              id="email"
              name="email"
              value={email}
              onChange={onChange}
              required
            />
          </div>
          <div className="mb-3">
            <label htmlFor="password" className="form-label">Password</label>
            <input
              type="password"
              className="form-control"
              id="password"
              name="password"
              value={password}
              onChange={onChange}
              required
              minLength="6"
            />
          </div>
          <div className="mb-3">
            <label htmlFor="password2" className="form-label">Confirm Password</label>
            <input
              type="password"
              className="form-control"
              id="password2"
              name="password2"
              value={password2}
              onChange={onChange}
              required
              minLength="6"
            />
          </div>
          <button type="submit" className="btn btn-primary w-100">Register</button>
        </form>
      </div>
    </div>
  );
};

export default Register;
---------------
// src/components/auth/Login.js:

import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const Login = () => {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const { email, password } = formData;

  const onChange = e => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const onSubmit = async e => {
    e.preventDefault();
    
    // In a real app, you would authenticate with your backend
    // For now, we'll just simulate successful login
    try {
      // This would be a real API call in a complete app
      // const res = await axios.post('http://localhost:5000/api/auth/login', formData);
      console.log('Login attempt with:', email);
      
      // Simulate successful login
      localStorage.setItem('user', JSON.stringify({ email }));
      navigate('/');
    } catch (err) {
      setError('Invalid credentials');
      console.error('Login error:', err);
    }
  };

  return (
    <div className="card">
      <div className="card-body">
        <h2 className="card-title text-center mb-4">Login</h2>
        {error && <div className="alert alert-danger">{error}</div>}
        <form onSubmit={onSubmit}>
          <div className="mb-3">
            <label htmlFor="email" className="form-label">Email</label>
            <input
              type="email"
              className="form-control"
              id="email"
              name="email"
              value={email}
              onChange={onChange}
              required
            />
          </div>
          <div className="mb-3">
            <label htmlFor="password" className="form-label">Password</label>
            <input
              type="password"
              className="form-control"
              id="password"
              name="password"
              value={password}
              onChange={onChange}
              required
            />
          </div>
          <button type="submit" className="btn btn-primary w-100">Login</button>
        </form>
      </div>
    </div>
  );
};

export default Login;
----------------
// src/components/tests/SpeakingTests.js:

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const SpeakingTests = () => {
  const [tests, setTests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [newQuestion, setNewQuestion] = useState('');
  const [error, setError] = useState('');

  // Fetch speaking tests
  useEffect(() => {
    const fetchTests = async () => {
      try {
        const res = await axios.get('http://localhost:5000/api/speaking-tests');
        setTests(res.data.data);
        setLoading(false);
      } catch (err) {
        console.error('Error fetching speaking tests:', err);
        setError('Failed to load speaking tests');
        setLoading(false);
      }
    };

    fetchTests();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // In a real app, you would get the user ID from authentication
    // For now, we'll use a placeholder user ID
    const userId = 1;
    
    try {
      const res = await axios.post('http://localhost:5000/api/speaking-tests', {
        user_id: userId,
        question: newQuestion
      });
      
      setTests([...tests, res.data.data]);
      setNewQuestion('');
    } catch (err) {
      setError('Failed to create speaking test');
      console.error('Error creating speaking test:', err);
    }
  };

  if (loading) {
    return <div>Loading speaking tests...</div>;
  }

  return (
    <div>
      <h2>Speaking Tests</h2>
      {error && <div className="alert alert-danger">{error}</div>}
      
      <div className="card mb-4">
        <div className="card-body">
          <h5 className="card-title">Add New Speaking Question</h5>
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label htmlFor="question" className="form-label">Question</label>
              <textarea
                className="form-control"
                id="question"
                value={newQuestion}
                onChange={(e) => setNewQuestion(e.target.value)}
                required
              ></textarea>
            </div>
            <button type="submit" className="btn btn-primary">Add Question</button>
          </form>
        </div>
      </div>
      
      <div className="list-group">
        {tests.length === 0 ? (
          <div className="alert alert-info">No speaking tests available.</div>
        ) : (
          tests.map(test => (
            <div key={test.id} className="list-group-item">
              <h5>{test.question}</h5>
              {test.response && <p><strong>Response:</strong> {test.response}</p>}
              {test.score && <p><strong>Score:</strong> {test.score}</p>}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default SpeakingTests;
-----------
// src/components/tests/ListeningTests.js:

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const ListeningTests = () => {
  const [tests, setTests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [newQuestion, setNewQuestion] = useState('');
  const [error, setError] = useState('');

  // Fetch listening tests
  useEffect(() => {
    const fetchTests = async () => {
      try {
        const res = await axios.get('http://localhost:5000/api/listening-tests');
        setTests(res.data.data);
        setLoading(false);
      } catch (err) {
        console.error('Error fetching listening tests:', err);
        setError('Failed to load listening tests');
        setLoading(false);
      }
    };

    fetchTests();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // In a real app, you would get the user ID from authentication
    // For now, we'll use a placeholder user ID
    const userId = 1;
    
    try {
      const res = await axios.post('http://localhost:5000/api/listening-tests', {
        user_id: userId,
        question: newQuestion
      });
      
      setTests([...tests, res.data.data]);
      setNewQuestion('');
    } catch (err) {
      setError('Failed to create listening test');
      console.error('Error creating listening test:', err);
    }
  };

  if (loading) {
    return <div>Loading listening tests...</div>;
  }

  return (
    <div>
      <h2>Listening Tests</h2>
      {error && <div className="alert alert-danger">{error}</div>}
      
      <div className="card mb-4">
        <div className="card-body">
          <h5 className="card-title">Add New Listening Question</h5>
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label htmlFor="question" className="form-label">Question</label>
              <textarea
                className="form-control"
                id="question"
                value={newQuestion}
                onChange={(e) => setNewQuestion(e.target.value)}
                required
              ></textarea>
            </div>
            <button type="submit" className="btn btn-primary">Add Question</button>
          </form>
        </div>
      </div>
      
      <div className="list-group">
        {tests.length === 0 ? (
          <div className="alert alert-info">No listening tests available.</div>
        ) : (
          tests.map(test => (
            <div key={test.id} className="list-group-item">
              <h5>{test.question}</h5>
              {test.response && <p><strong>Response:</strong> {test.response}</p>}
              {test.score && <p><strong>Score:</strong> {test.score}</p>}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default ListeningTests;
-------------

*backend codes*
--------------------------------

// routes/__init__.py:

# This file makes the routes directory a Python package
-------------
// routes/test_routes.py:

from flask import Blueprint, jsonify, request
from models import db, User, SpeakingTest, ListeningTest

bp = Blueprint('test_routes', __name__)

@bp.route('/test', methods=['GET'])
def test_route():
    """Simple test route to verify API is working"""
    return jsonify({"message": "API is working correctly!"})

# User routes
@bp.route('/users', methods=['GET'])
def get_users():
    """Get all users"""
    users = User.get_all_users()
    result = [{"id": user.id, "name": user.name, "email": user.email} for user in users]
    return jsonify({"status": "success", "data": result})

@bp.route('/users', methods=['POST'])
def create_user():
    """Create a new user"""
    data = request.get_json()
    
    if not data or not all(key in data for key in ['name', 'email', 'password']):
        return jsonify({"status": "error", "message": "Missing required fields"}), 400
    
    # Check if user already exists
    existing_user = User.get_user_by_email(data['email'])
    if existing_user:
        return jsonify({"status": "error", "message": "Email already registered"}), 409
    
    # Create new user
    user = User.add_user(data['name'], data['email'], data['password'])
    
    return jsonify({
        "status": "success", 
        "message": "User created successfully",
        "data": {"id": user.id, "name": user.name, "email": user.email}
    }), 201

# Speaking test routes
@bp.route('/speaking-tests', methods=['GET'])
def get_speaking_tests():
    """Get all speaking tests"""
    tests = SpeakingTest.get_all_tests()
    result = [{
        "id": test.id,
        "user_id": test.user_id,
        "question": test.question,
        "response": test.response,
        "score": test.score,
        "created_at": test.created_at
    } for test in tests]
    return jsonify({"status": "success", "data": result})

@bp.route('/speaking-tests', methods=['POST'])
def create_speaking_test():
    """Create a new speaking test"""
    data = request.get_json()
    
    if not data or not all(key in data for key in ['user_id', 'question']):
        return jsonify({"status": "error", "message": "Missing required fields"}), 400
    
    # Create new test
    test = SpeakingTest.add_test(
        user_id=data['user_id'],
        question=data['question'],
        response=data.get('response'),
        score=data.get('score')
    )
    
    return jsonify({
        "status": "success", 
        "message": "Speaking test created successfully",
        "data": {
            "id": test.id,
            "user_id": test.user_id,
            "question": test.question
        }
    }), 201

# Get a specific speaking test by ID
@bp.route('/speaking-tests/<int:test_id>', methods=['GET'])
def get_speaking_test(test_id):
    """Get a specific speaking test by ID"""
    test = SpeakingTest.get_test_by_id(test_id)
    
    if not test:
        return jsonify({"status": "error", "message": "Test not found"}), 404
    
    return jsonify({
        "status": "success", 
        "data": {
            "id": test.id,
            "user_id": test.user_id,
            "question": test.question,
            "response": test.response,
            "score": test.score,
            "created_at": test.created_at
        }
    })

# Update a speaking test
@bp.route('/speaking-tests/<int:test_id>', methods=['PUT'])
def update_speaking_test(test_id):
    """Update a speaking test"""
    data = request.get_json()
    
    if not data:
        return jsonify({"status": "error", "message": "No data provided"}), 400
    
    test = SpeakingTest.get_test_by_id(test_id)
    if not test:
        return jsonify({"status": "error", "message": "Test not found"}), 404
    
    # Extract updatable fields from request
    updates = {}
    if 'question' in data:
        updates['question'] = data['question']
    if 'response' in data:
        updates['response'] = data['response']
    if 'score' in data:
        updates['score'] = data['score']
    
    # Update the test
    updated_test = SpeakingTest.update_test(test_id, **updates)
    
    return jsonify({
        "status": "success", 
        "message": "Speaking test updated successfully",
        "data": {
            "id": updated_test.id,
            "user_id": updated_test.user_id,
            "question": updated_test.question,
            "response": updated_test.response,
            "score": updated_test.score
        }
    })

# Delete a speaking test
@bp.route('/speaking-tests/<int:test_id>', methods=['DELETE'])
def delete_speaking_test(test_id):
    """Delete a speaking test"""
    test = SpeakingTest.get_test_by_id(test_id)
    if not test:
        return jsonify({"status": "error", "message": "Test not found"}), 404
    
    result = SpeakingTest.delete_test(test_id)
    
    if result:
        return jsonify({
            "status": "success", 
            "message": "Speaking test deleted successfully"
        })
    else:
        return jsonify({
            "status": "error", 
            "message": "Failed to delete speaking test"
        }), 500

# Listening test routes
@bp.route('/listening-tests', methods=['GET'])
def get_listening_tests():
    """Get all listening tests"""
    tests = ListeningTest.get_all_tests()
    result = [{
        "id": test.id,
        "user_id": test.user_id,
        "question": test.question,
        "response": test.response,
        "score": test.score,
        "created_at": test.created_at
    } for test in tests]
    return jsonify({"status": "success", "data": result})

@bp.route('/listening-tests', methods=['POST'])
def create_listening_test():
    """Create a new listening test"""
    data = request.get_json()
    
    if not data or not all(key in data for key in ['user_id', 'question']):
        return jsonify({"status": "error", "message": "Missing required fields"}), 400
    
    # Create new test
    test = ListeningTest.add_test(
        user_id=data['user_id'],
        question=data['question'],
        response=data.get('response'),
        score=data.get('score')
    )
    
    return jsonify({
        "status": "success", 
        "message": "Listening test created successfully",
        "data": {
            "id": test.id,
            "user_id": test.user_id,
            "question": test.question
        }
    }), 201
-------------
// app.py:

from flask import Flask
from flask_cors import CORS
from models import db
from config import Config
from flask_migrate import Migrate

# Create Flask application
app = Flask(__name__)
app.config.from_object(Config)

# Enable CORS
CORS(app)

# Initialize database
db.init_app(app)
migrate = Migrate(app, db)

# Import routes
from routes.test_routes import bp
app.register_blueprint(bp, url_prefix='/api')

# Create database tables
with app.app_context():
    db.create_all()

@app.route('/')
def index():
    return {"message": "Welcome to the IELTS Speaking Test API"}

if __name__ == '__main__':
    app.run(debug=True)
-------------
// config.py:

import os

class Config:
    # Database configuration
    SQLALCHEMY_DATABASE_URI = "sqlite:///ielts_app.db"  # SQLite for simplicity
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SECRET_KEY = os.getenv("SECRET_KEY", "default_secret_key_for_dev")
-------------
// models.py:

from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

# Initialize SQLAlchemy
db = SQLAlchemy()

class User(db.Model):
    """User model representing test takers"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)  # Should be hashed in production
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relationships
    speaking_tests = db.relationship('SpeakingTest', backref='user', lazy=True)
    listening_tests = db.relationship('ListeningTest', backref='user', lazy=True)
    
    def __repr__(self):
        return f"<User {self.name}>"

    # CRUD Operations
    @staticmethod
    def add_user(name, email, password):
        """Add a new user"""
        user = User(name=name, email=email, password=password)
        db.session.add(user)
        db.session.commit()
        return user
    
    @staticmethod
    def get_user_by_id(user_id):
        """Get user by ID"""
        return User.query.get(user_id)
    
    @staticmethod
    def get_user_by_email(email):
        """Get user by email"""
        return User.query.filter_by(email=email).first()
    
    @staticmethod
    def get_all_users():
        """Get all users"""
        return User.query.all()
    
    @staticmethod
    def update_user(user_id, **kwargs):
        """Update user details"""
        user = User.query.get(user_id)
        if user:
            for key, value in kwargs.items():
                if hasattr(user, key):
                    setattr(user, key, value)
            db.session.commit()
            return user
        return None
    
    @staticmethod
    def delete_user(user_id):
        """Delete a user"""
        user = User.query.get(user_id)
        if user:
            db.session.delete(user)
            db.session.commit()
            return True
        return False


class SpeakingTest(db.Model):
    """SpeakingTest model for speaking test records"""
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    question = db.Column(db.String(255), nullable=False)
    response = db.Column(db.Text, nullable=True)  # Audio response transcript or details
    score = db.Column(db.Float, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f"<SpeakingTest {self.id} by User {self.user_id}>"
    
    # CRUD Operations
    @staticmethod
    def add_test(user_id, question, response=None, score=None):
        """Add a new speaking test"""
        test = SpeakingTest(user_id=user_id, question=question, response=response, score=score)
        db.session.add(test)
        db.session.commit()
        return test
    
    @staticmethod
    def get_test_by_id(test_id):
        """Get test by ID"""
        return SpeakingTest.query.get(test_id)
    
    @staticmethod
    def get_tests_by_user(user_id):
        """Get all tests for a specific user"""
        return SpeakingTest.query.filter_by(user_id=user_id).all()
    
    @staticmethod
    def get_all_tests():
        """Get all tests"""
        return SpeakingTest.query.all()
    
    @staticmethod
    def update_test(test_id, **kwargs):
        """Update test details"""
        test = SpeakingTest.query.get(test_id)
        if test:
            for key, value in kwargs.items():
                if hasattr(test, key):
                    setattr(test, key, value)
            db.session.commit()
            return test
        return None
    
    @staticmethod
    def delete_test(test_id):
        """Delete a test"""
        test = SpeakingTest.query.get(test_id)
        if test:
            db.session.delete(test)
            db.session.commit()
            return True
        return False


class ListeningTest(db.Model):
    """ListeningTest model for listening test records"""
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    question = db.Column(db.String(255), nullable=False)
    response = db.Column(db.Text, nullable=True)
    score = db.Column(db.Float, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f"<ListeningTest {self.id} by User {self.user_id}>"
    
    # CRUD Operations
    @staticmethod
    def add_test(user_id, question, response=None, score=None):
        """Add a new listening test"""
        test = ListeningTest(user_id=user_id, question=question, response=response, score=score)
        db.session.add(test)
        db.session.commit()
        return test
    
    @staticmethod
    def get_test_by_id(test_id):
        """Get test by ID"""
        return ListeningTest.query.get(test_id)
    
    @staticmethod
    def get_tests_by_user(user_id):
        """Get all tests for a specific user"""
        return ListeningTest.query.filter_by(user_id=user_id).all()
    
    @staticmethod
    def get_all_tests():
        """Get all tests"""
        return ListeningTest.query.all()
    
    @staticmethod
    def update_test(test_id, **kwargs):
        """Update test details"""
        test = ListeningTest.query.get(test_id)
        if test:
            for key, value in kwargs.items():
                if hasattr(test, key):
                    setattr(test, key, value)
            db.session.commit()
            return test
        return None
    
    @staticmethod
    def delete_test(test_id):
        """Delete a test"""
        test = ListeningTest.query.get(test_id)
        if test:
            db.session.delete(test)
            db.session.commit()
            return True
        return False
------------
// test_crud:

import os
import sys
from flask import Flask
from models import db, User, SpeakingTest, ListeningTest
from config import Config

def create_app():
    # Create test Flask application
    app = Flask(__name__)
    app.config.from_object(Config)
    
    # Initialize database
    db.init_app(app)
    
    return app

def test_user_crud():
    """Test CRUD operations on User model"""
    print("===== Testing User CRUD Operations =====")
    
    # Create a new user
    print("\nCreating new user...")
    user = User.add_user("Test User", "test@example.com", "password123")
    print(f"Created user: {user.name} with ID: {user.id}")
    
    # Get user by ID
    print("\nGetting user by ID...")
    retrieved_user = User.get_user_by_id(user.id)
    print(f"Retrieved user: {retrieved_user.name}")
    
    # Update user
    print("\nUpdating user...")
    updated_user = User.update_user(user.id, name="Updated Test User")
    print(f"Updated user name: {updated_user.name}")
    
    # Get all users
    print("\nGetting all users...")
    all_users = User.get_all_users()
    print(f"Total users: {len(all_users)}")
    
    # Delete user
    print("\nDeleting user...")
    result = User.delete_user(user.id)
    print(f"User deleted: {result}")
    
    # Verify deletion
    print("\nVerifying deletion...")
    deleted_user = User.get_user_by_id(user.id)
    print(f"User should be None: {deleted_user is None}")

def test_speaking_test_crud():
    """Test CRUD operations on SpeakingTest model"""
    print("\n===== Testing SpeakingTest CRUD Operations =====")
    
    # Create a test user first
    user = User.add_user("Speaking Test User", "speaking@example.com", "password123")
    
    # Create a new test
    print("\nCreating new speaking test...")
    test = SpeakingTest.add_test(
        user_id=user.id,
        question="Describe your hometown.",
        response="My hometown is a beautiful city...",
        score=7.5
    )
    print(f"Created test with ID: {test.id}")
    
    # Get test by ID
    print("\nGetting test by ID...")
    retrieved_test = SpeakingTest.get_test_by_id(test.id)
    print(f"Retrieved test score: {retrieved_test.score}")
    
    # Update test
    print("\nUpdating test...")
    updated_test = SpeakingTest.update_test(test.id, score=8.0)
    print(f"Updated test score: {updated_test.score}")
    
    # Get tests by user
    print("\nGetting tests by user...")
    user_tests = SpeakingTest.get_tests_by_user(user.id)
    print(f"User tests count: {len(user_tests)}")
    
    # Delete test
    print("\nDeleting test...")
    result = SpeakingTest.delete_test(test.id)
    print(f"Test deleted: {result}")
    
    # Clean up the test user
    User.delete_user(user.id)

def test_listening_test_crud():
    """Test CRUD operations on ListeningTest model"""
    print("\n===== Testing ListeningTest CRUD Operations =====")
    
    # Create a test user first
    user = User.add_user("Listening Test User", "listening@example.com", "password123")
    
    # Create a new test
    print("\nCreating new listening test...")
    test = ListeningTest.add_test(
        user_id=user.id,
        question="Listen to the conversation and answer the questions.",
        response="The conversation was about...",
        score=6.5
    )
    print(f"Created test with ID: {test.id}")
    
    # Get test by ID
    print("\nGetting test by ID...")
    retrieved_test = ListeningTest.get_test_by_id(test.id)
    print(f"Retrieved test score: {retrieved_test.score}")
    
    # Update test
    print("\nUpdating test...")
    updated_test = ListeningTest.update_test(test.id, score=7.0)
    print(f"Updated test score: {updated_test.score}")
    
    # Get tests by user
    print("\nGetting tests by user...")
    user_tests = ListeningTest.get_tests_by_user(user.id)
    print(f"User tests count: {len(user_tests)}")
    
    # Delete test
    print("\nDeleting test...")
    result = ListeningTest.delete_test(test.id)
    print(f"Test deleted: {result}")
    
    # Clean up the test user
    User.delete_user(user.id)

if __name__ == "__main__":
    app = create_app()
    with app.app_context():
        # Create tables
        db.create_all()
        
        # Run tests
        test_user_crud()
        test_speaking_test_crud()
        test_listening_test_crud()
        
        print("\nAll CRUD tests completed successfully!")
------------
// requirements.txt:

Flask==2.0.1
Flask-SQLAlchemy==2.5.1
Flask-Migrate==3.1.0
python-dotenv==0.19.0
SQLAlchemy==1.4.23
------------

